#include <compat/deprecated.h>
#include <FlexiTimer2.h>

//http://www.arduino.cc/playground/Main/FlexiTimer2

#define NUMCHANNELS 2 //6
#define HEADERLEN 4
#define PACKETLEN (NUMCHANNELS * 2 + HEADERLEN + 1)
#define SAMPFREQ 256                      // 

#define TIMER2VAL (1024/(SAMPFREQ))       // Set 256Hz sampling frequency                    

volatile unsigned char TXBuf[PACKETLEN];  //The transmission packet
volatile unsigned char TXIndex;           //Next byte to write in the transmission packet.
volatile unsigned char CurrentCh;         //Current channel being sampled.
volatile unsigned char counter = 0;   //Additional divider used to generate CAL_SIG
volatile unsigned int ADC_Value = 0;    //ADC current value

void setup() {

 noInterrupts();  // Disable all interrupts before initialization
 
 TXBuf[0] = 0xa5;    //Sync 0
 TXBuf[1] = 0x5a;    //Sync 1
 TXBuf[2] = 2;       //Protocol version
 TXBuf[3] = 0;       //Packet counter
 TXBuf[4] = 0x02;    //CH1 High Byte
 TXBuf[5] = 0x00;    //CH1 Low Byte
 TXBuf[6] = 0x02;    //CH2 High Byte
 TXBuf[7] = 0x00;    //CH2 Low Byte
 TXBuf[8] = 0x02;    //Sample Second 
 /*TXBuf[9] = 0x00;    //CH3 Low Byte
 TXBuf[10] = 0x02;   //CH4 High Byte
 TXBuf[11] = 0x00;   //CH4 Low Byte
 TXBuf[12] = 0x02;   //CH5 High Byte
 TXBuf[13] = 0x00;   //CH5 Low Byte
 TXBuf[14] = 0x02;   //CH6 High Byte
 TXBuf[15] = 0x00;   //CH6 Low Byte 
 TXBuf[2 * NUMCHANNELS + HEADERLEN] =  0x01;  // Switches state */

 // Timer2
 // Timer2 is used to setup the analag channels sampling frequency and packet update.
 // Whenever interrupt occures, the current read packet is sent to the PC
 // In addition the CAL_SIG is generated as well, so Timer1 is not required in this case!
 FlexiTimer2::set(TIMER2VAL, Timer2_Overflow_ISR);
 FlexiTimer2::start();

 Serial.begin(57600);

 interrupts();  // Enable all interrupts after initialization has been completed
}

void Timer2_Overflow_ISR()
{
  
  for(CurrentCh=0;CurrentCh<2;CurrentCh++){
    ADC_Value = analogRead(CurrentCh);
    TXBuf[((2*CurrentCh) + HEADERLEN)] = ((unsigned char)((ADC_Value & 0xFF00) >> 8));  // Write High Byte
    TXBuf[((2*CurrentCh) + HEADERLEN + 1)] = ((unsigned char)(ADC_Value & 0x00FF)); // Write Low Byte
  }
  
  String dani="";
  int countingByte = 0;
  for(TXIndex=0;TXIndex<8;TXIndex++){
    dani = String(dani + TXBuf[TXIndex]);
    dani = String(dani + "\n");
    countingByte++;
  }
  TXBuf[8] = millis()/1000;
  dani = String(dani + TXBuf[8]);
  dani = String(dani + "\n");
    
  //Serial.println(TXBuf[3],DEC);
  //Serial.print(dan







  
  
  TXBuf[3]++;     
  
  // Generate the CAL_SIGnal
  counter++;    // increment the devider counter
  if(counter == 12){  // 250/12/2 = 10.4Hz ->Toggle frequency
    counter = 0;
  }
}


void loop() {
  
 __asm__ __volatile__ ("sleep");
 
}
